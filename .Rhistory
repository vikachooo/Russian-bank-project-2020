goods_export <- cbind.data.frame("партнер1"=p1,"партнер2"=p2,"экспорт (доллары США)"=expo)
goods_export
goods_export <- cbind.data.frame("партнер1"=p1,"партнер2"=p2,"экспорт (доллары США)"=expo)
goods_export
View(export)
goods_export <- cbind.data.frame("партнер1"=p1,"партнер2"=p2,"экспорт (доллары США)"=expo)
goods_export
export <- goods_export
goods_export <- cbind.data.frame("партнер1"=p1,"партнер2"=p2,"экспорт (доллары США)"=expo)
goods_export
export <- goods_export
goods_export
View(export)
goods_export <- cbind.data.frame("партнер1"=p1,"партнер2"=p2,"экспорт (доллары США)"=expo)
goods_export
export <- "goods_export"
goods_import <- cbind.data.frame ("партнер1"=p1,"партнер2"=p2, "импорт (доллары США)"= с("3 515 239 399","229 687 088 046","2 249 551 077","42 262 861 193","326 628 559 104","30 883 263 358"))
goods_import <- cbind.data.frame ("партнер1"=p1,"партнер2"=p2, "импорт (доллары США)"= c("3 515 239 399","229 687 088 046","2 249 551 077","42 262 861 193","326 628 559 104","30 883 263 358"))
goods_import <- cbind.data.frame ("партнер1"=p1,"партнер2"=p2, "импорт (доллары США)"= c("3 515 239 399","229 687 088 046","2 249 551 077","42 262 861 193","326 628 559 104","30 883 263 358"))
goods_import
p
p <- c("Netherlands", "USA", "Canada")
age <- c(24, 26, 17)
sex <- c("M", "F", "M")
cbind(age, sex)
rbind(age, sex)
Netherlands <- c("0", "29 807 484 356", "4 862 948 109")
USA <- c("51 225 636 600", "0", "292 338 433 401")
Canada <-c("3 905 228 446", "336 531 873 909", "0")
rbind(Netherlands,USA,Canada)
Netherlands <- c("0", "29 807 484 356", "4 862 948 109")
USA <- c("51 225 636 600", "0", "292 338 433 401")
Canada <-c("3 905 228 446", "336 531 873 909", "0")
export_mat <- rbind(Netherlands,USA,Canada)
View(export_mat)
Netherlands <- c("0", "29 807 484 356", "4 862 948 109")
USA <- c("51 225 636 600", "0", "292 338 433 401")
Canada <-c("3 905 228 446", "336 531 873 909", "0")
export_mat <- rbind(Netherlands,USA,Canada)
colnames(export_mat) <-c("Netherlands","USA","Canada")
Netherlands <- c("0", "29 807 484 356", "4 862 948 109")
USA <- c("51 225 636 600", "0", "292 338 433 401")
Canada <-c("3 905 228 446", "336 531 873 909", "0")
export_mat <- rbind(Netherlands,USA,Canada)
colnames(export_mat) <-c("Netherlands","USA","Canada")
export_mat
Netherlands <- c("0", "29 807 484 356", "4 862 948 109")
USA <- c("51 225 636 600", "0", "292 338 433 401")
Canada <-c("3 905 228 446", "336 531 873 909", "0")
export_mat <- rbind(Netherlands,USA,Canada)
colnames(export_mat) <-c("to Netherlands","to USA","to Canada")
export_mat
Netherlands_e <- c("0", "29 807 484 356", "4 862 948 109")
USA_e <- c("51 225 636 600", "0", "292 338 433 401")
Canada_e <-c("3 905 228 446", "336 531 873 909", "0")
export_mat <- rbind(Netherlands,USA,Canada)
colnames(export_mat) <-c("to Netherlands","to USA","to Canada")
export_mat
Netherlands_i <- c("0","42 262 861 193","2 249 551 077")
USA_i <- c("30 883 263 358","0","326 628 559 104")
Canada_i <- c("3 515 239 399","229 687 088 046","0")
import_mat <-rbind(Netherlands_i,USA_i,Canada_i)
Netherlands_i <- c("0","42 262 861 193","2 249 551 077")
USA_i <- c("30 883 263 358","0","326 628 559 104")
Canada_i <- c("3 515 239 399","229 687 088 046","0")
import_mat <-rbind(Netherlands_i,USA_i,Canada_i)
colnames(import_mat) <-c("to Netherlands","to USA","to Canada")
Netherlands_i <- c("0","42 262 861 193","2 249 551 077")
USA_i <- c("30 883 263 358","0","326 628 559 104")
Canada_i <- c("3 515 239 399","229 687 088 046","0")
import_mat <-rbind(Netherlands_i,USA_i,Canada_i)
colnames(import_mat) <-c("to Netherlands","to USA","to Canada")
import_mat
diff_mat <- export_mat - import_mat
export_mat - import_mat
class(export_mat)
import_mat
export_mat <- as.numeric (export_mat)
import_mat
export_mat <- as.numeric (export_mat)
import_mat <- as.numeric(import_mat)
import_mat <- as.numeric(import_mat)
diff_mat <- export_mat - import_mat
diff_mat <- export_mat - import_mat
diff_mat
Netherlands_i <- c("0","42 262 861 193","2 249 551 077")
Netherlands_i <- as.numeric(Netherlands_i)
USA_i <- c("30 883 263 358","0","326 628 559 104")
Canada_i <- c("3 515 239 399","229 687 088 046","0")
import_mat <-rbind(Netherlands_i,USA_i,Canada_i)
colnames(import_mat) <-c("to Netherlands","to USA","to Canada")
import_mat
Netherlands_i <- c("0","42262861193","2249551077")
Netherlands_i <- as.numeric(Netherlands_i)
USA_i <- c("30 883 263 358","0","326 628 559 104")
Canada_i <- c("3 515 239 399","229 687 088 046","0")
import_mat <-rbind(Netherlands_i,USA_i,Canada_i)
colnames(import_mat) <-c("to Netherlands","to USA","to Canada")
import_mat
Netherlands_e <- c("0", "29807484356", "4862948109")
USA_e <- c("51225636600", "0", "292338433401")
Canada_e <-c("3905228446", "336531873909", "0")
export_mat <- rbind(Netherlands_e,USA_e,Canada_e)
colnames(export_mat) <-c("to Netherlands","to USA","to Canada")
export_mat
Netherlands_i <- c("0","42262861193","2249551077")
Netherlands_i <- as.numeric(Netherlands_i)
USA_i <- c("30883263358","0","326628559104")
Canada_i <- c("3515239399","229687088046","0")
import_mat <-rbind(Netherlands_i,USA_i,Canada_i)
colnames(import_mat) <-c("to Netherlands","to USA","to Canada")
import_mat
diff_mat <- export_mat - import_mat
Netherlands_i <- c("0","42262861193","2249551077")
Netherlands_i <- as.numeric(Netherlands_i)
USA_i <- c("30883263358","0","326628559104")
USA_i <- as.numeric(USA_i)
Canada_i <- c(3515239399,229687088046,0)
Netherlands_i <- c(0,42262861193,2249551077)
USA_i <- c(30883263358,0,326628559104)
Canada_i <- c(3515239399,229687088046,0)
import_mat <-rbind(Netherlands_i,USA_i,Canada_i)
colnames(import_mat) <-c("to Netherlands","to USA","to Canada")
import_mat
Netherlands_e <- c(0, 29807484356, 4862948109)
USA_e <- c(51225636600, 0, 292338433401)
Canada_e <-c(3905228446, 336531873909, 0)
export_mat <- rbind(Netherlands_e,USA_e,Canada_e)
colnames(export_mat) <-c("to Netherlands","to USA","to Canada")
export_mat
diff_mat <- export_mat - import_mat
diff_mat
log_export <- log(export_mat)
import_mat
log_export <- log(export_mat)
log_export
import_mat
log_export <- log10(export_mat)
log_export
log_import <- log10(import_mat)
log_impor
log_export <- log10(export_mat)
log_export
log_import <- log10(import_mat)
log_import
L_data <- list(source="COMTRADE, https://comtrade.un.org/",
year = "2019",
countries = c("Netherlands",USA","Canada"),
L_data <- list(source= "COMTRADE, https://comtrade.un.org/", year = "2019",
countries = c("Netherlands","USA","Canada"),
export = data.frame(goods_export),
import = data.frame(goods_import),
export_mat = matrix(export_mat),
import_mat = matrix(import_mat))
L_data
Netherlands_e <- c(0, 29807484356, 4862948109)
USA_e <- c(51225636600, 0, 292338433401)
Canada_e <-c(3905228446, 336531873909, 0)
export_mat <- rbind(Netherlands_e,USA_e,Canada_e)
colnames(export_mat) <-c("to Netherlands","to USA","to Canada")
export_mat
Netherlands_i <- c(0,42262861193,2249551077)
USA_i <- c(30883263358,0,326628559104)
Canada_i <- c(3515239399,229687088046,0)
import_mat <-rbind(Netherlands_i,USA_i,Canada_i)
colnames(import_mat) <-c("to Netherlands","to USA","to Canada")
import_mat
Netherlands_i <- c(0,42262861193,2249551077)
USA_i <- c(30883263358,0,326628559104)
Canada_i <- c(3515239399,229687088046,0)
import_mat <-rbind(Netherlands_i,USA_i,Canada_i)
colnames(import_mat) <-c("to Netherlands","to USA","to Canada")
import_mat
Netherlands_i <- c(0,42262861193,2249551077)
USA_i <- c(30883263358,0,326628559104)
Canada_i <- c(3515239399,229687088046,0)
import_mat <-rbind(Netherlands_i,USA_i,Canada_i)
colnames(import_mat) <-c("to Netherlands","to USA","to Canada")
import_mat
Netherlands_e <- c(0, 29807484356, 4862948109)
USA_e <- c(51225636600, 0, 292338433401)
Canada_e <-c(3905228446, 336531873909, 0)
export_mat <- rbind(Netherlands_e,USA_e,Canada_e)
colnames(export_mat) <-c("to Netherlands","to USA","to Canada")
export_mat
L_data
View(import_mat)
View(export_mat)
L_data <- list(source= "COMTRADE, https://comtrade.un.org/", year = "2019",
countries = c("Netherlands","USA","Canada"),
export = data.frame(goods_export),
import = data.frame(goods_import),
export_mat = export_mat,
import_mat = import_mat)
L_data
L_data[[3]][3]
L_data[[6]][1][3]
L_data[[6]][1]
L_data[[6]][1(3)]
L_data[[6]][1[3]
L_data[[6]][1[3]]
View(export_mat)
L_data[[6]]
L_data[[6]]("Netherlands_e","to Canada")
L_data[[6]]["Netherlands_e","to Canada")]
L_data[[6]]["Netherlands_e","to Canada"]
L_data[[7]]["USA_i","to Canada"]
View(import_mat)
L_data[[8]] <- sys.date()
L_data[[8]] <- Sys.Date()
L_data
age<-27
bmi <- function(){
m <- as.numeric(readline("Type your body mass (kg): "))
h <- as.numeric(readline("Type your height (cm): "))
res <- m/(h/100)^2
return(res)
}
bmi
bmi()
bmi <- function(){
m <- as.numeric(readline("Type your body mass (kg): "))
h <- as.numeric(readline("Type your height (cm): "))
res <- m/(h/100)^2
return(round(res))
}
bmi()
myname <- vika
myname <- "vika"
hello <- function(){
name <- readline("Type your name: ")
if (name == myname) {cat(name, "welcome to R")}
else {print("Sorry, R is not available now")}
}
hello()
hello
hello()
describe_mat <- function(v){
c("rows" = nrow(v), "cols" = ncol(v), "\n")
c(rowMeans(v),colMeans(v))
}
describe_mat(matrix(1:20, nrow = 4, ncol = 5))
describe_mat <- function(v){
list(rows = nrow(v),cols = ncol(v), c(rowMeans(v),colMeans(v)))
}
describe_mat(matrix(1:20, nrow = 4, ncol = 5))
describe_mat <- function(v){
list(rows = nrow(v),cols = ncol(v), c(rowMean(v),colMean(v)))
}
describe_mat(matrix(1:20, nrow = 4, ncol = 5))
describe_mat <- function(v){
list(rows = nrow(v),cols = ncol(v), means = c(rowMeans(v),colMeans(v)))
}
describe_mat(matrix(1:20, nrow = 4, ncol = 5))
matr <- matrix(1:20, nrow = 4, ncol = 5)
matr
v <- c("www.champ.info/apples ",
"www.champ.info/blue_screens ",
"www.champ.info/code_monsters ")
strsplit(v, "/")
strsplit(v[2], "/")
strsplit(v[2], "/")[[1]]
strsplit(v[2], "/")[[1]][2]
?trimws
res1 <- trimws(strsplit(v[2], "/")[[1]][2])
res1
res2 <- unlist(strsplit(res1, "_"))
res2
?collapse
res3 <- paste(res2, collapse = " ")
res3
final <- tools::toTitleCase(res3)
final
my_trans <- function(s){
res1 <- trimws(strsplit(s, "/")[[1]][2])
res2 <- unlist(strsplit(res1, "_"))
res3 <- paste(res2, collapse = " ")
final <- tools::toTitleCase(res3)
final
}
teams <- sapply(v, my_trans)
unname(teams)
?unname
teams <- sapply(v, my_trans)
teams
unname(teams)
dat <- c(c(12.5, 40, 45.5, 48),
c(25, 45, 30.5, 47),
c(37.5, 28, 30, 45))
mean(dat)
sapply(dat,mean)
kino <- list(c(1, "кинотеатр ""Октябрь"""),
kino <- list(
c(1, 'кинотеатр "Октябрь"'),
c(2, 'кинотеатр "Пионер"'),
c(3, 'кинотеатр "Балтика"')
)
kino
strsplit(kino, "")
strsplit(kino, " ")
v <- c("www.champ.info/apples ",
"www.champ.info/blue_screens ",
"www.champ.info/code_monsters ")
strsplit(v, "/")
strsplit(kino, " ")
strsplit(kino, ",")
unlist(kino)
unlist(strsplit(kino, ","))
kino[[1]][2]
strsplit(kino[[1]][2],"'" )
strsplit(kino[[1]][2],"\" )
strsplit(kino,"\" )
kino[[1]]
v[2]
v <- kino[[1]
v[2]
v <- kino[[1]]
v[2]
res1 <- strsplit(v[2],"\")
res1 <- strsplit(v[2],"\"")
res1 <- strsplit(v[2],"\)
v[2]
res1 <- strsplit(v[2],"\")
res1 <- strsplit(v[2],'"')
res1
res1 <- strsplit(v[2],'"')[[1]][2]
res1 <- strsplit(v[2],'"')
res1
res1 <- strsplit(v[2],'"')[[2]]
res1 <- strsplit(v[2],'"')[[1]]
res1
res1 <- strsplit(v[2],'"')[[1]][2]
res1
res2 <- toupper(res1)
res2
kino_names <-function(){
res1 <- strsplit(v[2],'"')[[1]][2]
res2 <- toupper(res1)
res2
}
res1 <- strsplit(v[2],'"')
res1
res1 <- strsplit(v[2],'"')[[1]]
res1
res1 <- strsplit(v[2],'"')[[1]][2]
res1
sapply(kino,kino_names)
kino_names <-function(){
res1 <- strsplit(v[2],'"')[[1]][2]
res2 <- toupper(res1)
res2
}
sapply(kino,kino_names)
kino <- list(
c(1, 'кинотеатр "Октябрь"'),
c(2, 'кинотеатр "Пионер"'),
c(3, 'кинотеатр "Балтика"')
)
v <- kino[[1]]
v
v[2]
kino_names <-function(){
res1 <- strsplit(v[2],'"')[[1]][2]
res2 <- toupper(res1)
res2
}
sapply(kino,kino_names)
sapply(kino, kino_names)
kino_names <-function(v){
res1 <- strsplit(v[2],'"')[[1]][2]
res2 <- toupper(res1)
res2
}
sapply(kino, kino_names)
install.packages("geojsonio")
install.packages("leaflet")
library(geojsonio)
kibrary(leaflet)
library(leaflet)
rus <- geojson_read('data/russia.geojson', what = 'sp')
rus <- geojson_read('/Users/viktoriazajceva/Desktop/R/20 Проект/dashboard/map/russia.geojson', what = 'sp')
class(rus)
set.seed(777)
rus@data <- mutate(rus@data, num = rnorm(n = 83, mean = 100, sd = 30))
library(tidyverse)
rus@data <- mutate(rus@data, num = rnorm(n = 83, mean = 100, sd = 30))
pal <- colorNumeric('BuPu', NULL) # задаём палитру цветов
rus@data <- mutate(rus@data,
reg_color = pal(num),
reg_label = paste0(name, ': ', formatC(num), ' попугаев'))
glimpse(rus@data)
rus@data$reg_label
View(rus)
rus %>%
leaflet() %>%
addTiles() %>% # инициализируем карту
addPolygons(stroke = FALSE, fillColor = ~reg_color, # раскрашиваем области
label = ~reg_label) %>% # добавляем подписи
addLegend(pal = pal, values = ~num, title = 'Попугаи') %>% # добавляем легенду
setView(lng = 100, lat = 66, zoom = 2) # просим показывать Россию
chukotka <- rus@polygons[[18]]
for (i in 1:length(chukotka@Polygons)) {
polygon_long <- chukotka@Polygons[[i]]@coords[, 1]
if (mean(polygon_long) < 0) {
polygon_long <- 360 + polygon_long
}
chukotka@Polygons[[i]]@coords[, 1] <- polygon_long
}
rus_corrected <- rus
rus_corrected@polygons[[18]] <- chukotka
rus_corrected %>%
leaflet() %>%
addTiles() %>% # инициализируем карту
addPolygons(stroke = FALSE, fillColor = ~reg_color, # раскрашиваем области
label = ~reg_label) %>% # добавляем подписи
addLegend(pal = pal, values = ~num, title = 'Попугаи') %>% # добавляем легенду
setView(lng = 100, lat = 66, zoom = 2) # просим показывать Россию
geojson_write(rus, file = 'russia_new.geojson')
all_data <- read.csv("All_data.csv")
setwd("/Users/viktoriazajceva/Desktop/R/20 Проект/dashboard")
top_only <- read.csv("top_only.csv")
all_data <- read.csv("All_data.csv")
all_data_eng <- read.csv("All_data.csv") #для английской версии
all_data_eng <- all_data_eng[,-c(1,2)]
# переименовываю стобцы на англ
all_data_eng <- all_data_eng %>%
rename(
transactions = Индекс.БП,
activity = Месячный.Индекс.А,
tourism = Индекс.Т,
average.wage = Средняя.заработная.плата,
unemployment.rate = Уровень.безработицы....,
internet.users = Число.активных.абонентов.доступа.к.интернету,
loan.applications = Всего.одобренных.заявок,
online.loan.applications.share = Доля.онлайн.заявок....,
offline.loan.applications.share =Доля.заявок.в.офисе.банка....,
mortgage.deals = Всего.ипотечных.сделок,
new.build.share = Доля.сделок..первичка....,
already.owned.share = Доля.сделок..вторичка....,
Month = Месяц
)
View(all_data_eng)
map_data <- all_data_eng[,c(1,3,5,6,8,9)]
View(map_data)
colnames(map_data)[1]
colnames(map_data)[1] <- 'Region'
View(map_data)
map_data %>% group_by(Region)
map_data %>% group_by(Region) %>% summarise(transactions_av = mean(transactions),
activity_av = mean(activity),
wage = mean(average.wage),
unemployment = mean(unemployment.rate))
map_data <- map_data %>% group_by(Region) %>% summarise(transactions_av = mean(transactions),
activity_av = mean(activity),
wage = mean(average.wage),
unemployment = mean(unemployment.rate))
View(map_data)
getwd()
write.csv(map_data, "map_data.csv")
colnames(map_data)
library(RColorBrewer)
# Sample data: Replace this with your actual geographical data
data("quakes") # Using quakes data for demonstration; replace with your data
quakes$variable <- sample(c("transactions_av", "activity_av", "wage", "unemployment"), nrow(quakes), replace = TRUE)
library(shiny)
# UI
ui <- fluidPage(
titlePanel("Russia Map"),
sidebarLayout(
sidebarPanel(
selectInput("variable", "Choose indicator:", choices = c("transactions_av", "activity_av", "wage", "unemployment")),
selectInput("palette", "Choose Color Palette:", choices = rownames(subset(brewer.pal.info, category %in% c("seq"))))
),
mainPanel(leafletOutput("map"))
)
)
# Server logic
server <- function(input, output) {
output$map <- renderLeaflet({
# Filter data based on selected variable - adapt this based on your actual data structure
data <- map_data
# Define color palette
colorPalette <- colorBin(palette = brewer.pal(brewer.pal.info[input$palette, "maxcolors"], input$palette), domain = data[[input$variable]], bins = 7)
leaflet(data) %>%
addTiles() %>%
addCircles(lat = ~lat, lng = ~long, color = ~colorPalette(data[[input$variable]]), opacity = 1, fillOpacity = 1, radius = 500) %>%
addLegend(pal = colorPalette, values = data[[input$variable]], opacity = 1)
})
}
# Run the application
shinyApp(ui = ui, server = server)
leaflet(data) %>%
addTiles() %>%
addCircles(lat = ~lat, lng = ~long, color = ~colorPalette(data[[input$variable]]), opacity = 1, fillOpacity = 1, radius = 500) %>%
addLegend(pal = colorPalette, values = data[[input$variable]], opacity = 1)
rus_corrected@data$name
map_data$Region
unique(rus_corrected@data$name) #76
unique(map_data$Region) #83
map_names <- unique(rus_corrected@data$name) #83
data_names <- unique(map_data$Region) #83
for (i in map_names){
if (!(i %in% data_names)) {
print(i)
}
}
print(length(i))
print(sum(i))
map_names
sort(map_names)
data_names
sort(data_names)
